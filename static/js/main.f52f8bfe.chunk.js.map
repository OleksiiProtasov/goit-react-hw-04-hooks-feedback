{"version":3,"sources":["Components/Sections/style.module.css","Components/Notification/notification.module.css","Components/Sections/Section.js","Components/Notification/Notifications.js","Components/Options/Options.js","Components/stats/stats.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","children","className","style","Container","Notification","message","styles","messageItem","FeedbackOptions","option","onChangeStats","item","ButtonGroup","Button","backgroundColor","type","name","button_good","onClick","e","currentTarget","button_neutral","button_bad","Stats","statistics","good","neutral","bad","total","getPositive","totalDiv","titleItem","App","useState","setGood","setNeutral","setBad","allCount","getTotal","prevGood","prevNeutral","prevBad","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f52f8bfe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"style_Container__3LQqb\",\"button\":\"style_button__1Fkza\",\"active\":\"style_active__12RRG\",\"disabled\":\"style_disabled__TaXva\",\"title\":\"style_title__14WG8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageItem\":\"notification_messageItem__25EF0\"};","import React from \"react\";\r\nimport style from \"./style.module.css\"\r\n\r\nconst Section = ({ children }) => {\r\n  return <div className={style.Container}>{children}</div>;\r\n};\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styles from \"../Notification/notification.module.css\";\r\n\r\nconst Notification = ({ message }) => (\r\n  <h2 className={styles.messageItem}>{message}</h2>\r\n);\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport styles from \"../Sections/style.module.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nconst FeedbackOptions = ({ option, onChangeStats }) => {\r\n  return (\r\n\r\n    <>\r\n      <h1 className={styles.item}>Please leave feedback</h1>\r\n      <ButtonGroup aria-label=\"contained primary button group\">\r\n          <Button\r\n          style={{ backgroundColor: \"greenyellow\" }}\r\n          type=\"button\"\r\n          name=\"good\"\r\n          className={styles.button_good}\r\n          onClick={(e) => {\r\n            onChangeStats(e.currentTarget.name);\r\n          }}\r\n          >\r\n          good\r\n        </Button>\r\n        <Button\r\n          style={{ backgroundColor: \"yellow\" }}\r\n          type=\"button\"\r\n          name=\"neutral\"\r\n          className={styles.button_neutral}\r\n          onClick={(e) => {\r\n            onChangeStats(e.currentTarget.name);\r\n          }}\r\n        >\r\n          neutral\r\n        </Button>\r\n        <Button\r\n          style={{ backgroundColor: \"red\" }}\r\n          type=\"button\"\r\n          name=\"bad\"\r\n          className={styles.button_bad}\r\n          onClick={(e) => {\r\n            onChangeStats(e.currentTarget.name);\r\n          }}\r\n        >\r\n          bad\r\n        </Button>\r\n      </ButtonGroup>\r\n    </>\r\n  );\r\n};\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport styles from \"../stats/stats.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Stats = ({ statistics: { good, neutral, bad }, total, getPositive }) => {\r\n  return (\r\n    <>\r\n      <p className={styles.item}> Good: {good} </p>\r\n      <p className={styles.item}> Neutral: {neutral}</p>\r\n      <p className={styles.item}> Bad: {bad} </p>\r\n      <div className={styles.totalDiv}>\r\n        <p className={styles.titleItem}>Total: {total} </p>\r\n        <p className={styles.titleItem}>Positive percentage: {getPositive} %</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nStats.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  getPositive: PropTypes.number.isRequired,\r\n  statistics:  PropTypes.object.isRequired,\r\n  \r\n};\r\nexport default Stats;\r\n","import { useState } from \"react\";\r\n\r\nimport Sections from \"./Components/Sections/Section\";\r\nimport Notification from \"./Components/Notification/Notifications\";\r\nimport FeedbackOptions from \"./Components/Options/Options\";\r\nimport Stats from \"./Components/stats/stats\";\r\n\r\nexport default function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const allCount = {good, neutral, bad};\r\n\r\n  const handleChangeStats = (name) => {\r\n    switch (name) {\r\n      case \"good\":\r\n        setGood((prevGood) => prevGood + 1);\r\n        break;\r\n      case \"neutral\":\r\n        setNeutral((prevNeutral) => prevNeutral + 1);\r\n        break;\r\n      case \"bad\":\r\n        setBad((prevBad) => prevBad + 1);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  const getTotal = good + bad + neutral;\r\n\r\n  const getPositivePercentage = () =>  Math.round((good / getTotal) * 100);\r\n\r\n  return (\r\n    <>\r\n        <Sections>\r\n          <FeedbackOptions  onChangeStats={handleChangeStats} />\r\n            {getTotal ? (\r\n              <Stats\r\n                statistics={ allCount }\r\n                total={getTotal}\r\n                getPositive={getPositivePercentage()}\r\n              />\r\n            ) : (\r\n              <Notification message=\"𝙽𝚘 𝚏𝚎𝚎𝚍𝚋𝚊𝚌𝚔 𝚐𝚒𝚟𝚎𝚗\" />\r\n            )}\r\n        </Sections>\r\n    </>\r\n  );\r\n};\r\n  \r\n\r\n\r\n// class App extends Component {\r\n//   state = {\r\n//     good: 0,\r\n//     neutral: 0,\r\n//     bad: 0,\r\n//   };\r\n\r\n\r\n//   handleChangeStats = (name) => {\r\n//     this.setState((prev) => ({\r\n\r\n//       [name]: prev[name] + 1,\r\n\r\n//     }));\r\n//   };\r\n\r\n//   getTotal = () => {\r\n//     const { good, bad, neutral } = this.state;\r\n//     return good + bad + neutral;\r\n//   };\r\n\r\n//   getPositivePercentage = () => {\r\n//     const { good } = this.state;\r\n//     return Math.round((good / this.getTotal()) * 100);\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <Container>\r\n//           <Sections>\r\n//             <FeedbackOptions onChangeStats={this.handleChangeStats} />\r\n//             {this.getTotal() ? (\r\n//               <Stats\r\n//                 stats={this.state}\r\n//                 total={this.getTotal()}\r\n//                 getPositive={this.getPositivePercentage()}\r\n//               />\r\n//             ) : (\r\n//               <Notification message=\"𝙽𝚘 𝚏𝚎𝚎𝚍𝚋𝚊𝚌𝚔 𝚐𝚒𝚟𝚎𝚗\" />\r\n//             )}\r\n//           </Sections>\r\n//         </Container>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}